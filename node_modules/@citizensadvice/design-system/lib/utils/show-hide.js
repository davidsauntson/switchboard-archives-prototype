"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Adds show / hide functionality to a component, with the following criteria:
 *  - show / hide is controlled by a single element, this is refered to as `toggle` throughout the code
 *  - the element that is being shown or hidden (the target) is closed by default and has a single styleing class
 *    that shows it when added
 *
 * @param selectors     functional class selectors for the component that uses show / hide
 * @param classes       styling classes for the toggle and target
 * @param attributes    data attribute names that contain the target id and the aria descriptions
 */
var initShowHideWithToggle = function (selectors, classes, attributes) {
    function toggleElementState(toggle, ariaDescriptionSelector) {
        var targetSelector = toggle.getAttribute(attributes.target);
        if (targetSelector) {
            var target = document.getElementById(targetSelector);
            target === null || target === void 0 ? void 0 : target.classList.toggle(classes.elementIsOpen);
            toggle.classList.toggle(classes.toggleWhenHidden);
            toggle.classList.toggle(classes.toggleWhenShowing);
            var ariaDescription = toggle.getAttribute(ariaDescriptionSelector);
            if (ariaDescription) {
                toggle.setAttribute('aria-label', ariaDescription);
            }
            var ariaExpanded = toggle.getAttribute('aria-expanded');
            var isExpanded = ariaExpanded === 'true';
            toggle.setAttribute('aria-expanded', (!isExpanded).toString());
        }
    }
    // Used during setup - logic is inverse of toggle
    function initAriaDescription(toggle) {
        var ariaDescriptionSelector = toggle.classList.contains(classes.toggleWhenHidden)
            ? attributes.labelWhenHidden
            : attributes.labelWhenShowing;
        var ariaDescription = toggle.getAttribute(ariaDescriptionSelector);
        if (ariaDescription) {
            toggle.setAttribute('aria-label', ariaDescription);
        }
    }
    var init = function (component) {
        var toggles = component.querySelectorAll(selectors.toggle);
        var _loop_1 = function (i) {
            var toggle = toggles[i];
            toggle.addEventListener('click', function () {
                var ariaDescriptionSelector = attributes.labelWhenHidden;
                if (toggle.classList.contains(classes.toggleWhenHidden)) {
                    ariaDescriptionSelector = attributes.labelWhenShowing;
                }
                toggleElementState(toggle, ariaDescriptionSelector);
            });
            initAriaDescription(toggle);
        };
        for (var i = 0; i < toggles.length; i++) {
            _loop_1(i);
        }
    };
    var components = document.querySelectorAll(selectors.component);
    for (var i = 0; i < components.length; i++) {
        init(components[i]);
    }
};
exports.default = initShowHideWithToggle;
