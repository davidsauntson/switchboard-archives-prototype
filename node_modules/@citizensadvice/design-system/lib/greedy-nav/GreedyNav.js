"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GreedyNavMenu = exports.updateLabel = exports.showToggle = void 0;
/* eslint-disable no-console */
var Config_1 = require("./Config");
var supports = !!document.querySelector && !!window.addEventListener; // Feature test
/**
 * Provides backwards compatibility with IE 11.
 *
 * If we want to access the relatedTarget of an event we should use
 * a focusout event as per the spec, but in IE 11 we need to use blur.
 *
 * This constant should be used in place of focusout/blur when assigning
 * event handlers.
 */
var blurEventName = Object.prototype.hasOwnProperty.call(MouseEvent, 'relatedTarget')
    ? 'focusout'
    : 'blur';
/**
 * Debounced resize to throttle execution
 * @param func
 * @param wait
 * @param immediate
 * @returns {Function}
 */
function debounce(func, wait, immediate) {
    if (immediate === void 0) { immediate = false; }
    var timeout;
    return function debounced() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var context = this;
        var later = function () {
            timeout = null;
            if (!immediate) {
                func.apply(context, args);
            }
        };
        if (timeout) {
            window.clearTimeout(timeout);
        }
        else if (immediate) {
            func.apply(context, args);
        }
        timeout = window.setTimeout(later, wait);
    };
}
/**
 * return true if el has a parent
 * @param el
 * @param parent
 */
var parent = function (element, parentNode) {
    var el = element;
    while (el !== null) {
        if (el.parentNode === parentNode) {
            return true;
        }
        el = el.parentNode;
    }
    return false;
};
/**
 * Show/hide toggle button
 */
var showToggle = function (navWrapperElement, navDropdownToggleSelector, breaks) {
    if (breaks.length < 1) {
        var navDropdownToggle = navWrapperElement.querySelector(navDropdownToggleSelector);
        if (navDropdownToggle === null) {
            return;
        }
        navDropdownToggle.classList.add('cads-greedy-nav-is-hidden');
        navDropdownToggle.classList.remove('cads-greedy-nav-is-visible');
        navWrapperElement.classList.remove('cads-greedy-nav-has-dropdown');
        /**
         * Set aria attributes for accessibility
         */
        var navWrapper = navWrapperElement.querySelector('.cads-greedy-nav__wrapper');
        if (navWrapper) {
            navWrapper.setAttribute('aria-haspopup', 'false');
        }
    }
    else {
        var navDropdownToggle = navWrapperElement.querySelector(navDropdownToggleSelector);
        if (navDropdownToggle === null) {
            return;
        }
        navDropdownToggle.classList.add('cads-greedy-nav-is-visible');
        navDropdownToggle.classList.remove('cads-greedy-nav-is-hidden');
        navWrapperElement.classList.add('cads-greedy-nav-has-dropdown');
        /**
         * Set aria attributes for accessibility
         */
        var navWrapper = navWrapperElement.querySelector('.cads-greedy-nav__wrapper');
        if (navWrapper) {
            navWrapper.setAttribute('aria-haspopup', 'true');
        }
    }
};
exports.showToggle = showToggle;
/**
 * Update count on dropdown toggle button
 */
var updateCount = function (_this, navDropdownToggleSelector, breaks) {
    var _a;
    // eslint-disable-next-line no-unused-expressions
    (_a = _this
        .querySelector(navDropdownToggleSelector)) === null || _a === void 0 ? void 0 : _a.setAttribute('cadsGreedyNav-count', "".concat(breaks.length));
};
var updateLabel = function (menu, label, navDropdownToggleSelector, navDropdownLabelActive) {
    var toggle = menu.querySelector(navDropdownToggleSelector);
    if (toggle === null) {
        return;
    }
    toggle.innerHTML = label;
    toggle.setAttribute('aria-label', "".concat(label, " navigation options"));
    if (label === navDropdownLabelActive) {
        toggle.setAttribute('aria-expanded', 'true');
    }
    else {
        toggle.setAttribute('aria-expanded', 'false');
    }
};
exports.updateLabel = updateLabel;
var checkForSymbols = function (str) {
    var firstChar = str.charAt(0);
    if (firstChar === '.' || firstChar === '#') {
        return false;
    }
    return true;
};
/**
 * Get innerwidth without padding
 * @param element
 * @returns {number}
 */
var getElementContentWidth = function (element) {
    var styles = window.getComputedStyle(element);
    var padding = parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight);
    return element.clientWidth - padding;
};
/**
 * Get viewport size
 * @returns {{width: number, height: number}}
 */
var viewportSize = function () {
    var doc = document;
    var w = window;
    var docEl = doc.compatMode && doc.compatMode === 'CSS1Compat'
        ? doc.documentElement
        : doc.body;
    var width = docEl.clientWidth;
    var height = docEl.clientHeight;
    // mobile zoomed in?
    if (w.innerWidth && width > w.innerWidth) {
        width = w.innerWidth;
        height = w.innerHeight;
    }
    return { width: width, height: height };
};
/**
 * Count width of children and return the value
 * @param e
 */
var getChildrenWidth = function (e) {
    var children = e.childNodes;
    var sum = 0;
    for (var i = 0; i < children.length; i++) {
        if (children[i].nodeType !== 3) {
            if (!Number.isNaN(children[i].offsetWidth)) {
                sum += children[i].offsetWidth;
            }
        }
    }
    return sum;
};
/**
 * Get width
 * @param elem
 * @returns {number}
 */
var calculateWidths = function (_this, offsetPixels) {
    var totalWidth = getElementContentWidth(_this);
    var restWidth = getChildrenWidth(_this) + offsetPixels;
    var viewportWidth = viewportSize().width;
    return { totalWidth: totalWidth, restWidth: restWidth, viewportWidth: viewportWidth };
};
var relatedTarget = function (e, document) {
    return (e === null || e === void 0 ? void 0 : e.relatedTarget) || document.activeElement;
};
var GreedyNavMenu = /** @class */ (function () {
    // eslint-disable-next-line default-param-last
    function GreedyNavMenu(config, document) {
        if (config === void 0) { config = Config_1.defaultConfig; }
        this.settings = __assign(__assign({}, Config_1.defaultConfig), config);
        this.count = 0;
        this.breaks = [];
        this.instance = 0;
        this.mainNavWrapper = null;
        this.navDropdown = null;
        this.navDropdownToggle = null;
        this.toggleWrapper = null;
        this.navDropdownSelector = ".".concat(this.settings.navDropdownClassName);
        this.navDropdownToggleSelector = ".".concat(this.settings.navDropdownToggleClassName);
        this.mainNavSelector = this.settings.mainNav;
        this.totalWidth = 0;
        this.restWidth = 0;
        this.viewportWidth = 0;
        this.document = document || window.document;
    }
    GreedyNavMenu.prototype.init = function () {
        var _this_1 = this;
        // Feature test.
        if (!supports && typeof Node === 'undefined') {
            console.warn("This browser doesn't support GreedyNav");
            return;
        }
        // Options check
        if (!checkForSymbols(this.settings.navDropdownClassName) ||
            !checkForSymbols(this.settings.navDropdownToggleClassName)) {
            console.warn('No symbols allowed in navDropdownClassName & navDropdownToggleClassName. These are not selectors.');
            return;
        }
        /**
         * Store nodes
         * @type {NodeList}
         */
        var navWrapperList = this.document.querySelectorAll(this.settings.mainNavWrapper);
        /**
         * Loop over every instance and reference _this
         */
        navWrapperList.forEach(function (navWrapperElement) {
            /**
             * Create breaks array
             * @type {number}
             */
            _this_1.breaks = [];
            /**
             * Set the instance number as data attribute
             */
            navWrapperElement.setAttribute('instance', "".concat(_this_1.count++));
            /**
             * Store the wrapper element
             */
            _this_1.mainNavWrapper = navWrapperElement;
            if (!_this_1.mainNavWrapper) {
                console.warn("couldn't find the specified mainNavWrapper element");
                return;
            }
            /**
             * Store the menu elementStore the menu element
             */
            _this_1.mainNavSelector = _this_1.settings.mainNav;
            if (!navWrapperElement.querySelector(_this_1.mainNavSelector)) {
                console.warn("couldn't find the specified mainNav element");
                return;
            }
            /**
             * Check if we need to create the dropdown elements
             */
            _this_1.prepareHtml(navWrapperElement);
            /**
             * Store the dropdown element
             */
            _this_1.navDropdownSelector = ".".concat(_this_1.settings.navDropdownClassName);
            if (!navWrapperElement.querySelector(_this_1.navDropdownSelector)) {
                console.warn("couldn't find the specified navDropdown element");
                return;
            }
            /**
             * Store the dropdown toggle element
             */
            _this_1.navDropdownToggleSelector = ".".concat(_this_1.settings.navDropdownToggleClassName);
            if (!navWrapperElement.querySelector(_this_1.navDropdownToggleSelector)) {
                console.warn("couldn't find the specified navDropdownToggle element");
                return;
            }
            /**
             * Event listeners
             */
            _this_1.listeners(navWrapperElement);
        });
        /**
         * Count amount of instances
         */
        this.instance++;
        /**
         * Add class to HTML element to activate conditional CSS
         */
        this.document.documentElement.classList.add(this.settings.initClass);
    };
    /**
     * Check if dropdown menu is already on page before creating it
     * @param mainNavWrapper
     */
    GreedyNavMenu.prototype.prepareHtml = function (_this) {
        var _a;
        /**
         * Create dropdown menu
         * @type {HTMLElement}
         */
        this.toggleWrapper = this.document.createElement('div');
        this.navDropdown = this.document.createElement('ul');
        this.navDropdownToggle = this.document.createElement('button');
        /**
         * Set ID on nav dropdown so we can reference it later
         */
        var dropdownId = 'greedy-nav-dropdown';
        this.navDropdown.setAttribute('id', dropdownId);
        /**
         * Set label for dropdown toggle
         * @type {string}
         */
        this.navDropdownToggle.innerHTML = this.settings.navDropdownLabel;
        /**
         * Set aria attributes for accessibility
         */
        this.navDropdownToggle.setAttribute('aria-expanded', 'false');
        this.navDropdownToggle.setAttribute('aria-controls', dropdownId);
        this.navDropdownToggle.setAttribute('type', 'button');
        this.navDropdownToggle.setAttribute('aria-label', this.settings.navDropdownToggleAriaLabel);
        this.navDropdown.setAttribute('aria-hidden', 'true');
        var headerLinks = document.querySelector('.js-cads-copy-into-nav');
        if (headerLinks) {
            // prepare items that can close the more dropdown on blur
            var closeNavOnBlur = (_a = headerLinks.lastElementChild) === null || _a === void 0 ? void 0 : _a.querySelectorAll('a, button');
            closeNavOnBlur === null || closeNavOnBlur === void 0 ? void 0 : closeNavOnBlur.forEach(function (el) {
                return el.classList.add('js-cads-close-on-blur');
            });
            var headerLinksClone = headerLinks.cloneNode(true);
            var headerLinksContainer = document.createElement('li');
            headerLinksContainer.className = 'cads-greedy-nav__header-links';
            headerLinksContainer.appendChild(headerLinksClone);
            this.navDropdown.appendChild(headerLinksContainer);
        }
        /**
         * Move elements to the right spot
         */
        var mainNav = _this.querySelector(this.mainNavSelector);
        if (mainNav) {
            if (mainNav.parentNode !== _this) {
                console.warn('mainNav is not a direct child of mainNavWrapper, double check please');
                return;
            }
            mainNav.insertAdjacentElement('afterend', this.toggleWrapper);
        }
        this.toggleWrapper.appendChild(this.navDropdownToggle);
        this.toggleWrapper.appendChild(this.navDropdown);
        /**
         * Add classes so we can target elements
         */
        this.navDropdown.classList.add(this.settings.navDropdownClassName);
        this.navDropdown.classList.add('cads-greedy-nav__dropdown');
        this.navDropdownToggle.classList.add(this.settings.navDropdownToggleClassName);
        this.navDropdownToggle.classList.add('cads-greedy-nav__dropdown-toggle');
        // fix so button is type="button" and do not submit forms
        this.navDropdownToggle.setAttribute('type', 'button');
        this.toggleWrapper.classList.add("".concat(this.settings.navDropdownClassName, "-wrapper"));
        this.toggleWrapper.classList.add('cads-greedy-nav__wrapper');
        _this.classList.add('cads-greedy-nav');
    };
    /**
     * Bind eventlisteners
     */
    GreedyNavMenu.prototype.listeners = function (navWrapper) {
        var _this_1 = this;
        var observer = new ResizeObserver(debounce(function () {
            _this_1.doesItFit(navWrapper);
        }, this.settings.throttleDelay));
        var nav = document.querySelector('.js-cads-greedy-nav');
        if (nav) {
            // this will fire when observed - which is desirable. We
            // use this to set up the initial state of the dropdown.
            observer.observe(nav);
        }
        window.addEventListener('orientationchange', function () {
            _this_1.doesItFit(navWrapper);
        }, true);
        var navDropdownClassName = this.settings.navDropdownClassName;
        var navDropdownToggle = navWrapper.querySelector(this.navDropdownToggleSelector);
        if (navDropdownToggle) {
            navDropdownToggle.addEventListener('mouseup', function (event) {
                if (navWrapper.classList.contains('is-open')) {
                    _this_1.closeDropDown(navWrapper);
                }
                else {
                    _this_1.openDropDown(navWrapper);
                }
            });
        }
        var lastItemCloseHandler = function (event) {
            if (_this_1.toggleWrapper === null) {
                return;
            }
            if (!parent(relatedTarget(event, document), _this_1.toggleWrapper)) {
                _this_1.closeDropDown(navWrapper);
                var navLastDropdownLink = navWrapper.querySelector("".concat(_this_1.navDropdownSelector, " li:last-child a"));
                if (navLastDropdownLink) {
                    navLastDropdownLink.removeEventListener(blurEventName, lastItemCloseHandler);
                }
            }
        };
        /* Open when tabbing into the toggle */
        if (navDropdownToggle) {
            navDropdownToggle.addEventListener('keyup', function (event) {
                if (!event.shiftKey && event.key === 'Tab') {
                    _this_1.openDropDown(navWrapper);
                }
            });
        }
        if (navDropdownToggle && this.toggleWrapper) {
            navDropdownToggle.addEventListener(blurEventName, function (e) {
                var _a, _b;
                var lastItem;
                var headerLinksInNav = document.querySelector("".concat(_this_1.navDropdownSelector, " .js-cads-copy-into-nav"));
                if (headerLinksInNav === null || headerLinksInNav === void 0 ? void 0 : headerLinksInNav.offsetParent) {
                    lastItem = headerLinksInNav === null || headerLinksInNav === void 0 ? void 0 : headerLinksInNav.querySelector('.js-cads-close-on-blur');
                }
                else if ((headerLinksInNav === null || headerLinksInNav === void 0 ? void 0 : headerLinksInNav.offsetParent) === null) {
                    // offsetParent returns null in this case as the header links in the nav have display: none
                    // using nth-last-child(2) as the last-child in this case is the hidden header nav links
                    lastItem = (_a = _this_1.navDropdown) === null || _a === void 0 ? void 0 : _a.querySelector("li:nth-last-child(2) a");
                }
                else {
                    lastItem = (_b = _this_1.navDropdown) === null || _b === void 0 ? void 0 : _b.querySelector("li:last-child a");
                }
                if (!parent(relatedTarget(e, _this_1.document), _this_1.toggleWrapper)) {
                    // tabbing backwards
                    lastItem === null || lastItem === void 0 ? void 0 : lastItem.removeEventListener(blurEventName, lastItemCloseHandler);
                    _this_1.closeDropDown(navWrapper);
                }
                else {
                    // tabbing forwards
                    lastItem === null || lastItem === void 0 ? void 0 : lastItem.addEventListener(blurEventName, lastItemCloseHandler);
                }
            });
        }
        /*
         * Remove when clicked outside dropdown
         */
        this.document.addEventListener('click', function (event) {
            var targetEl = event.target;
            if (targetEl &&
                targetEl.closest(".".concat(navDropdownClassName)) &&
                navDropdownToggle &&
                targetEl !== navDropdownToggle &&
                navWrapper.classList.contains('is-open')) {
                _this_1.closeDropDown(navWrapper);
            }
        });
        /**
         * Remove when escape key is pressed
         */
        this.document.onkeydown = function (evt) {
            var event = evt || window.event;
            if (event.keyCode === 27) {
                _this_1.closeDropDown(navWrapper);
            }
        };
    };
    /**
     * Move item to dropdown
     */
    GreedyNavMenu.prototype.toDropdown = function (navigation) {
        var navDropdown = navigation.querySelector(this.navDropdownSelector);
        var mainNav = navigation.querySelector(this.mainNavSelector);
        if (navDropdown && mainNav) {
            /**
             * move last child of navigation menu to dropdown
             */
            if (navDropdown.firstChild &&
                mainNav.children.length > 0 &&
                mainNav.lastElementChild) {
                navDropdown.insertBefore(mainNav.lastElementChild, navDropdown.firstChild);
            }
            else if (mainNav.children.length > 0 && mainNav.lastElementChild) {
                navDropdown.appendChild(mainNav.lastElementChild);
            }
        }
        /**
         * store breakpoints
         */
        this.breaks.push(this.restWidth);
        /**
         * check if we need to show toggle menu button
         */
        (0, exports.showToggle)(navigation, this.navDropdownToggleSelector, this.breaks);
        /**
         * update count on dropdown toggle button
         */
        if (mainNav && mainNav.children.length > 0 && this.settings.count) {
            updateCount(navigation, this.navDropdownToggleSelector, this.breaks);
        }
        /**
         * If item has been moved to dropdown trigger the callback
         */
        this.settings.moved();
    };
    /**
     * Move item to menu
     */
    GreedyNavMenu.prototype.toMenu = function (_this) {
        var navDropdown = _this.querySelector(this.navDropdownSelector);
        var mainNav = _this.querySelector(this.mainNavSelector);
        /**
         * Move items from dropdown to menu
         */
        if (mainNav &&
            navDropdown &&
            navDropdown.children.length > 0 &&
            navDropdown.firstElementChild) {
            mainNav.appendChild(navDropdown.firstElementChild);
        }
        /**
         * remove last breakpoint
         */
        this.breaks.pop();
        /**
         * Check if we need to show toggle menu button
         */
        (0, exports.showToggle)(_this, this.navDropdownToggleSelector, this.breaks);
        /**
         * update count on dropdown toggle button
         */
        if (mainNav && mainNav.children.length > 0 && this.settings.count) {
            updateCount(_this, this.navDropdownToggleSelector, this.breaks);
        }
        /**
         * If item has been moved back to the main menu trigger the callback
         */
        this.settings.movedBack();
    };
    /**
     * Move item to array
     * @param item
     */
    GreedyNavMenu.prototype.doesItFit = function (_this) {
        /**
         * Increase instance
         */
        this.instance++;
        /**
         * Debounced execution of the main logic
         */
        /**
         * Update width
         */
        Object.assign(this, calculateWidths(_this, this.settings.offsetPixels));
        var mainNav = _this.querySelector(this.mainNavSelector);
        if (!mainNav) {
            throw new Error('main nav not found');
        }
        /**
         * Keep executing until all menu items that are overflowing are moved
         */
        while ((this.totalWidth <= this.restWidth && mainNav.children.length > 0) ||
            (this.viewportWidth < this.settings.breakPoint &&
                mainNav.children.length > 0)) {
            // move item to dropdown
            this.toDropdown(_this);
            // recalculate widths
            Object.assign(this, calculateWidths(_this, this.settings.offsetPixels));
            // update dropdownToggle label
            if (this.viewportWidth < this.settings.breakPoint) {
                (0, exports.updateLabel)(_this, this.settings.navDropdownBreakpointLabel, this.navDropdownToggleSelector, this.settings.navDropdownLabelActive);
            }
        }
        /**
         * Keep executing until all menu items that are able to move back are moved
         */
        while (this.totalWidth >= this.breaks[this.breaks.length - 1] &&
            this.viewportWidth > this.settings.breakPoint) {
            // move item to menu
            this.toMenu(_this);
            // update dropdownToggle label
            if (this.viewportWidth > this.settings.breakPoint) {
                (0, exports.updateLabel)(_this, this.settings.navDropdownLabel, this.navDropdownToggleSelector, this.settings.navDropdownLabelActive);
            }
        }
        /**
         * If there are no items in dropdown hide dropdown
         */
        var navDropdown = _this.querySelector(this.navDropdownSelector);
        if (navDropdown && this.breaks.length < 1) {
            navDropdown.classList.remove('show');
            // show navDropdownLabel
            (0, exports.updateLabel)(_this, this.settings.navDropdownLabel, this.navDropdownToggleSelector, this.settings.navDropdownLabelActive);
        }
        /**
         * If there are no items in menu
         */
        if (mainNav && mainNav.children.length < 1) {
            // show navDropdownBreakpointLabel
            _this.classList.add('is-empty');
            (0, exports.updateLabel)(_this, this.settings.navDropdownBreakpointLabel, this.navDropdownToggleSelector, this.settings.navDropdownLabelActive);
        }
        else {
            _this.classList.remove('is-empty');
        }
        /**
         * Check if we need to show toggle menu button
         */
        (0, exports.showToggle)(_this, this.navDropdownToggleSelector, this.breaks);
    };
    /**
     * Destroy the current initialization.
     * @public
     */
    GreedyNavMenu.prototype.destroy = function () {
        // Remove feedback class
        this.document.documentElement.classList.remove(this.settings.initClass);
        // Remove toggle
        if (this.toggleWrapper) {
            this.toggleWrapper.remove();
        }
    };
    GreedyNavMenu.prototype.openDropDown = function (navWrapper) {
        var navDropdownLabelActive = this.settings.navDropdownLabelActive;
        var navDropdown = navWrapper.querySelector(this.navDropdownSelector);
        var navDropdownToggle = navWrapper.querySelector(this.navDropdownToggleSelector);
        if (navDropdown && navDropdownToggle) {
            navDropdown.classList.add('show');
            navDropdownToggle.classList.add('is-open');
            navWrapper.classList.add('is-open');
            navDropdown.setAttribute('aria-hidden', 'false');
            (0, exports.updateLabel)(navWrapper, navDropdownLabelActive, this.navDropdownToggleSelector, navDropdownLabelActive);
        }
    };
    GreedyNavMenu.prototype.closeDropDown = function (navWrapper) {
        var _a = this.settings, navDropdownLabel = _a.navDropdownLabel, navDropdownLabelActive = _a.navDropdownLabelActive;
        var navDropdown = navWrapper.querySelector(this.navDropdownSelector);
        var navDropdownToggle = navWrapper.querySelector(this.navDropdownToggleSelector);
        if (navDropdown && navDropdownToggle) {
            navDropdown.classList.remove('show');
            navDropdownToggle.classList.remove('is-open');
            navWrapper.classList.remove('is-open');
            navDropdown.setAttribute('aria-hidden', 'true');
            (0, exports.updateLabel)(navWrapper, navDropdownLabel, this.navDropdownToggleSelector, navDropdownLabelActive);
        }
    };
    return GreedyNavMenu;
}());
exports.GreedyNavMenu = GreedyNavMenu;
var GreedyNav = {
    init: function (options) {
        if (options === void 0) { options = Config_1.defaultConfig; }
        var menu = new GreedyNavMenu(options);
        menu.init();
        return menu;
    },
};
/**
 * Initialize Plugin
 * @public
 * @param {Object} options User settings
 */
exports.default = GreedyNav;
