import { Config } from './Config';
/**
 * Show/hide toggle button
 */
export declare const showToggle: (navWrapperElement: HTMLElement, navDropdownToggleSelector: string, breaks: number[]) => void;
export declare const updateLabel: (menu: HTMLElement, label: string, navDropdownToggleSelector: string, navDropdownLabelActive: string) => void;
export declare class GreedyNavMenu {
    settings: Config;
    count: number;
    breaks: number[];
    instance: number;
    mainNavWrapper: Nullable<HTMLElement>;
    navDropdown: Nullable<HTMLUListElement>;
    navDropdownToggle: Nullable<HTMLElement>;
    toggleWrapper: Nullable<HTMLDivElement>;
    navDropdownSelector: string;
    navDropdownToggleSelector: string;
    mainNavSelector: string;
    totalWidth: number;
    restWidth: number;
    viewportWidth: number;
    /**
     * Only insert the document when using JSDOM for testing.
     */
    document: HTMLDocument;
    constructor(config?: Config, document?: HTMLDocument);
    init(): void;
    /**
     * Check if dropdown menu is already on page before creating it
     * @param mainNavWrapper
     */
    prepareHtml(_this: HTMLElement): void;
    /**
     * Bind eventlisteners
     */
    listeners(navWrapper: HTMLElement): void;
    /**
     * Move item to dropdown
     */
    toDropdown(navigation: HTMLElement): void;
    /**
     * Move item to menu
     */
    toMenu(_this: HTMLElement): void;
    /**
     * Move item to array
     * @param item
     */
    doesItFit(_this: HTMLElement): void;
    /**
     * Destroy the current initialization.
     * @public
     */
    destroy(): void;
    openDropDown(navWrapper: HTMLElement): void;
    closeDropDown(navWrapper: HTMLElement): void;
}
declare const GreedyNav: {
    init: (options?: Config) => GreedyNavMenu;
};
/**
 * Initialize Plugin
 * @public
 * @param {Object} options User settings
 */
export default GreedyNav;
